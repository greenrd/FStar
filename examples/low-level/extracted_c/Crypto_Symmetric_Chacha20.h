/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Symmetric_Chacha20_H
#define __Crypto_Symmetric_Chacha20_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part4.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part5.h"
#include "FStar_Buffer_Quantifiers.h"
#include "kremlib.h"
#include "testlib.h"

typedef uint64_t Crypto_Symmetric_Chacha20_u64;

extern uint32_t Crypto_Symmetric_Chacha20_keylen;

extern uint32_t Crypto_Symmetric_Chacha20_blocklen;

extern uint32_t Crypto_Symmetric_Chacha20_ivlen;

typedef uint8_t *Crypto_Symmetric_Chacha20_key;

typedef uint8_t *Crypto_Symmetric_Chacha20_block;

typedef uint8_t *Crypto_Symmetric_Chacha20_iv;

typedef uint32_t *Crypto_Symmetric_Chacha20_matrix;

typedef void (*Crypto_Symmetric_Chacha20_shuffle)(uint32_t *x0);

void
Crypto_Symmetric_Chacha20_line(uint32_t *m, uint32_t a, uint32_t b, uint32_t d, uint32_t s);

void
Crypto_Symmetric_Chacha20_quarter_round(
  uint32_t *m,
  uint32_t a,
  uint32_t b,
  uint32_t c,
  uint32_t d
);

void Crypto_Symmetric_Chacha20_column_round(uint32_t *m);

void Crypto_Symmetric_Chacha20_diagonal_round(uint32_t *m);

void Crypto_Symmetric_Chacha20_rounds(uint32_t *m);

void Crypto_Symmetric_Chacha20_fill(uint32_t *m, uint32_t i, uint32_t len, uint8_t *src);

void
Crypto_Symmetric_Chacha20_chacha20_init(
  uint32_t *m,
  uint8_t *key,
  uint8_t *iv,
  uint32_t counter
);

void Crypto_Symmetric_Chacha20_add(uint32_t *m, uint32_t *m0, uint32_t i);

void Crypto_Symmetric_Chacha20_sum_matrixes(uint32_t *m, uint32_t *m0);

void Crypto_Symmetric_Chacha20_chacha20_update(uint8_t *output, uint32_t *state, uint32_t len);

void
Crypto_Symmetric_Chacha20_chacha20(
  uint8_t *output,
  uint8_t *key,
  uint8_t *n,
  uint32_t counter,
  uint32_t len
);

void
Crypto_Symmetric_Chacha20_prf(uint8_t *x0, uint8_t *x1, uint8_t *x2, uint32_t x3, uint32_t x4);

void
Crypto_Symmetric_Chacha20_counter_mode(
  uint8_t *key,
  uint8_t *iv,
  uint32_t counter,
  uint32_t len,
  uint8_t *plaintext,
  uint8_t *ciphertext
);
#endif
