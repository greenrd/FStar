/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Symmetric_GF128_H
#define __Crypto_Symmetric_GF128_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part4.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part5.h"
#include "FStar_Buffer_Quantifiers.h"
#include "Crypto_Symmetric_Chacha20.h"
#include "Crypto_Indexing.h"
#include "Flag.h"
#include "Crypto_Symmetric_AES.h"
#include "Crypto_Symmetric_AES128.h"
#include "Crypto_Symmetric_Cipher.h"
#include "Crypto_Symmetric_Poly1305_Lemmas.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part6.h"
#include "Crypto_Symmetric_Poly1305_Bignum.h"
#include "Crypto_Symmetric_Poly1305.h"
#include "Crypto_Symmetric_GF128_Spec.h"
#include "kremlib.h"
#include "testlib.h"

extern uint32_t Crypto_Symmetric_GF128_len;

typedef void *Crypto_Symmetric_GF128_elem;

typedef uint8_t *Crypto_Symmetric_GF128_elemB;

void Crypto_Symmetric_GF128_gf128_add_loop(uint8_t *a, uint8_t *b, uint32_t dep);

void Crypto_Symmetric_GF128_gf128_add(uint8_t *a, uint8_t *b);

void Crypto_Symmetric_GF128_gf128_shift_right_loop(uint8_t *a, uint32_t dep);

void Crypto_Symmetric_GF128_gf128_shift_right(uint8_t *a);

uint8_t Crypto_Symmetric_GF128_ith_bit_mask(uint8_t num, uint32_t i);

void Crypto_Symmetric_GF128_apply_mask_loop(uint8_t *a, uint8_t *m, uint8_t msk, uint32_t dep);

void Crypto_Symmetric_GF128_apply_mask(uint8_t *a, uint8_t *m, uint8_t msk);

extern uint8_t Crypto_Symmetric_GF128_r_mul;

void Crypto_Symmetric_GF128_gf128_mul_loop(uint8_t *a, uint8_t *b, uint8_t *tmp, uint32_t dep);

void Crypto_Symmetric_GF128_gf128_mul(uint8_t *a, uint8_t *b);

void Crypto_Symmetric_GF128_add_and_multiply(uint8_t *acc, uint8_t *block, uint8_t *k);

void Crypto_Symmetric_GF128_finish(uint8_t *a, uint8_t *s);

void
Crypto_Symmetric_GF128_ghash_loop_(
  uint8_t *tag,
  uint8_t *auth_key,
  uint8_t *str,
  uint32_t len,
  uint32_t dep
);

void
Crypto_Symmetric_GF128_ghash_loop(
  uint8_t *tag,
  uint8_t *auth_key,
  uint8_t *str,
  uint32_t len,
  uint32_t dep
);

void Crypto_Symmetric_GF128_mk_len_info(uint8_t *len_info, uint32_t len_1, uint32_t len_2);

void
Crypto_Symmetric_GF128_ghash(
  uint8_t *k,
  uint8_t *ad,
  uint32_t adlen,
  uint8_t *ciphertext,
  uint32_t len,
  uint8_t *tag
);
#endif
