/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Symmetric_AES_H
#define __Crypto_Symmetric_AES_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part4.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part5.h"
#include "FStar_Buffer_Quantifiers.h"
#include "Crypto_Symmetric_Chacha20.h"
#include "Crypto_Indexing.h"
#include "Flag.h"
#include "kremlib.h"
#include "testlib.h"

typedef uint8_t *Crypto_Symmetric_AES_bytes;

Prims_nat Crypto_Symmetric_AES_v(uint32_t x);

extern uint32_t Crypto_Symmetric_AES_nb;

extern uint32_t Crypto_Symmetric_AES_nk;

extern uint32_t Crypto_Symmetric_AES_nr;

extern uint32_t Crypto_Symmetric_AES_blocklen;

extern uint32_t Crypto_Symmetric_AES_keylen;

extern uint32_t Crypto_Symmetric_AES_xkeylen;

typedef uint8_t *Crypto_Symmetric_AES_block;

typedef uint8_t *Crypto_Symmetric_AES_skey;

typedef uint8_t *Crypto_Symmetric_AES_xkey;

typedef uint32_t Crypto_Symmetric_AES_rnd;

typedef uint32_t Crypto_Symmetric_AES_idx_16;

uint8_t Crypto_Symmetric_AES_xtime(uint8_t b);

uint8_t Crypto_Symmetric_AES_multiply(uint8_t a, uint8_t b);

typedef uint8_t *Crypto_Symmetric_AES_sbox;

void Crypto_Symmetric_AES_mk_sbox(uint8_t *sbox);

void Crypto_Symmetric_AES_mk_inv_sbox(uint8_t *sbox);

uint8_t Crypto_Symmetric_AES_access_aux(uint8_t *sbox, uint8_t i, uint32_t ctr, uint8_t tmp);

uint8_t Crypto_Symmetric_AES_access(uint8_t *sbox, uint8_t i);

void Crypto_Symmetric_AES_subBytes_aux_sbox(uint8_t *state, uint8_t *sbox, uint32_t ctr);

void Crypto_Symmetric_AES_subBytes_sbox(uint8_t *state, uint8_t *sbox);

void Crypto_Symmetric_AES_shiftRows(uint8_t *state);

void Crypto_Symmetric_AES_mixColumns_(uint8_t *state, uint32_t c);

void Crypto_Symmetric_AES_mixColumns(uint8_t *state);

void Crypto_Symmetric_AES_addRoundKey_(uint8_t *state, uint8_t *w, uint32_t round, uint32_t c);

void Crypto_Symmetric_AES_addRoundKey(uint8_t *state, uint8_t *w, uint32_t round);

void
Crypto_Symmetric_AES_cipher_loop(uint8_t *state, uint8_t *w, uint8_t *sbox, uint32_t round);

void Crypto_Symmetric_AES_cipher(uint8_t *out, uint8_t *input, uint8_t *w, uint8_t *sbox);

void Crypto_Symmetric_AES_rotWord(uint8_t *word);

void Crypto_Symmetric_AES_subWord(uint8_t *word, uint8_t *sbox);

uint8_t Crypto_Symmetric_AES_rcon(uint32_t i, uint8_t tmp);

void
Crypto_Symmetric_AES_keyExpansion_aux_0(uint8_t *w, uint8_t *temp, uint8_t *sbox, uint32_t j);

void
Crypto_Symmetric_AES_keyExpansion_aux_1(uint8_t *w, uint8_t *temp, uint8_t *sbox, uint32_t j);

void
Crypto_Symmetric_AES_keyExpansion_aux(uint8_t *w, uint8_t *temp, uint8_t *sbox, uint32_t j);

void Crypto_Symmetric_AES_keyExpansion(uint8_t *key, uint8_t *w, uint8_t *sbox);

void Crypto_Symmetric_AES_invSubBytes_aux_sbox(uint8_t *state, uint8_t *sbox, uint32_t ctr);

void Crypto_Symmetric_AES_invSubBytes_sbox(uint8_t *state, uint8_t *sbox);

void Crypto_Symmetric_AES_invShiftRows(uint8_t *state);

void Crypto_Symmetric_AES_invMixColumns_(uint8_t *state, uint32_t c);

void Crypto_Symmetric_AES_invMixColumns(uint8_t *state);

void
Crypto_Symmetric_AES_inv_cipher_loop(uint8_t *state, uint8_t *w, uint8_t *sbox, uint32_t round);

void Crypto_Symmetric_AES_inv_cipher(uint8_t *out, uint8_t *input, uint8_t *w, uint8_t *sbox);
#endif
