/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Indexing_H
#define __Crypto_Indexing_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part4.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part5.h"
#include "FStar_Buffer_Quantifiers.h"
#include "Crypto_Symmetric_Chacha20.h"
#include "kremlib.h"
#include "testlib.h"

typedef enum { Crypto_Indexing_rw_Reader, Crypto_Indexing_rw_Writer } Crypto_Indexing_rw;

typedef enum { Crypto_Indexing_macAlg_POLY1305, Crypto_Indexing_macAlg_GHASH }
Crypto_Indexing_macAlg;

typedef enum {
  Crypto_Indexing_cipherAlg_AES128,
  Crypto_Indexing_cipherAlg_AES256,
  Crypto_Indexing_cipherAlg_CHACHA20
}
Crypto_Indexing_cipherAlg;

typedef enum {
  Crypto_Indexing_aeadAlg_AES_128_GCM,
  Crypto_Indexing_aeadAlg_AES_256_GCM,
  Crypto_Indexing_aeadAlg_CHACHA20_POLY1305
}
Crypto_Indexing_aeadAlg;

typedef struct {
  Crypto_Indexing_aeadAlg cipher;
  uint32_t uniq;
}
Crypto_Indexing_id;

Crypto_Indexing_aeadAlg Crypto_Indexing_aeadAlg_of_id(Crypto_Indexing_id i);

Crypto_Indexing_macAlg Crypto_Indexing_macAlg_of_id(Crypto_Indexing_id i);

Crypto_Indexing_cipherAlg Crypto_Indexing_cipherAlg_of_id(Crypto_Indexing_id i);

extern bool Crypto_Indexing_safeId(Crypto_Indexing_id x0);

Crypto_Indexing_id Crypto_Indexing_testId(Crypto_Indexing_aeadAlg a);
#endif
