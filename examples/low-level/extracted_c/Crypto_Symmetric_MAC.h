/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Symmetric_MAC_H
#define __Crypto_Symmetric_MAC_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part4.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part5.h"
#include "FStar_Buffer_Quantifiers.h"
#include "Crypto_Symmetric_Chacha20.h"
#include "Crypto_Indexing.h"
#include "Flag.h"
#include "Crypto_Symmetric_AES.h"
#include "Crypto_Symmetric_AES128.h"
#include "Crypto_Symmetric_Cipher.h"
#include "Crypto_Symmetric_Poly1305_Lemmas.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part6.h"
#include "Crypto_Symmetric_Poly1305_Bignum.h"
#include "Crypto_Symmetric_Poly1305.h"
#include "Crypto_Symmetric_GF128_Spec.h"
#include "Crypto_Symmetric_GF128.h"
#include "kremlib.h"
#include "testlib.h"

typedef struct {
  Crypto_Indexing_id fst;
  FStar_UInt128_t snd;
}
K___Crypto_Indexing_id_FStar_UInt128_t;

typedef K___Crypto_Indexing_id_FStar_UInt128_t Crypto_Symmetric_MAC_id;

Crypto_Indexing_macAlg Crypto_Symmetric_MAC_alg(K___Crypto_Indexing_id_FStar_UInt128_t i);

typedef void *Crypto_Symmetric_MAC_text;

Prims_int Crypto_Symmetric_MAC_limb_length(Crypto_Indexing_macAlg uu___45_18);

typedef struct {
  enum { Crypto_Symmetric_MAC__buffer_B_POLY1305, Crypto_Symmetric_MAC__buffer_B_GHASH } tag;
  union {
    struct { uint64_t *x00; } case_B_POLY1305;
    struct { uint8_t *x10; } case_B_GHASH;
  }
  u;
}
Crypto_Symmetric_MAC__buffer;

uint64_t *Crypto_Symmetric_MAC____B_POLY1305____0(Crypto_Symmetric_MAC__buffer projectee);

uint8_t *Crypto_Symmetric_MAC____B_GHASH____0(Crypto_Symmetric_MAC__buffer projectee);

Crypto_Symmetric_MAC__buffer
Crypto_Symmetric_MAC_reveal_elemB(
  K___Crypto_Indexing_id_FStar_UInt128_t i,
  Crypto_Symmetric_MAC__buffer e
);

void
**Crypto_Symmetric_MAC_as_buffer(
  K___Crypto_Indexing_id_FStar_UInt128_t i,
  Crypto_Symmetric_MAC__buffer uu___46_237
);

extern uint32_t Crypto_Symmetric_MAC_wlen;

typedef void *Crypto_Symmetric_MAC_word;

typedef void *Crypto_Symmetric_MAC_word_16;

typedef uint8_t *Crypto_Symmetric_MAC_wordB;

typedef uint8_t *Crypto_Symmetric_MAC_wordB_16;

void *Crypto_Symmetric_MAC_sel_word(FStar_HyperStack_mem h, uint8_t *b);

void
Crypto_Symmetric_MAC_sel_elem(
  FStar_HyperStack_mem h,
  K___Crypto_Indexing_id_FStar_UInt128_t i,
  Crypto_Symmetric_MAC__buffer b
);

void
Crypto_Symmetric_MAC_encode_r(
  K___Crypto_Indexing_id_FStar_UInt128_t i,
  Crypto_Symmetric_MAC__buffer b,
  uint8_t *raw
);

void Crypto_Symmetric_MAC_encode(K___Crypto_Indexing_id_FStar_UInt128_t i, void *w);

void Crypto_Symmetric_MAC_poly(K___Crypto_Indexing_id_FStar_UInt128_t i, void *cs, void *r);

void
Crypto_Symmetric_MAC_field_add(K___Crypto_Indexing_id_FStar_UInt128_t i, void *a, void *b);

void
Crypto_Symmetric_MAC_field_mul(K___Crypto_Indexing_id_FStar_UInt128_t i, void *a, void *b);

void
Crypto_Symmetric_MAC_op_Plus_At(K___Crypto_Indexing_id_FStar_UInt128_t i, void *e1, void *e2);

void
Crypto_Symmetric_MAC_op_Star_At(K___Crypto_Indexing_id_FStar_UInt128_t i, void *e1, void *e2);

typedef struct {
  Crypto_Symmetric_MAC__buffer fst;
  Crypto_Symmetric_MAC__buffer snd;
}
K___Crypto_Symmetric_MAC__buffer_Crypto_Symmetric_MAC__buffer;

void
Crypto_Symmetric_MAC_update(
  K___Crypto_Indexing_id_FStar_UInt128_t i,
  Crypto_Symmetric_MAC__buffer r,
  Crypto_Symmetric_MAC__buffer a,
  uint8_t *w
);

extern uint32_t Crypto_Symmetric_MAC_taglen;

typedef void *Crypto_Symmetric_MAC_tag;

typedef uint8_t *Crypto_Symmetric_MAC_tagB;

void
*Crypto_Symmetric_MAC_mac(K___Crypto_Indexing_id_FStar_UInt128_t i, void *cs, void *r, void *s);

void
Crypto_Symmetric_MAC_finish(
  K___Crypto_Indexing_id_FStar_UInt128_t i,
  uint8_t *s,
  Crypto_Symmetric_MAC__buffer a,
  uint8_t *t
);
#endif
