/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Symmetric_Poly1305_Bigint_H
#define __Crypto_Symmetric_Poly1305_Bigint_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "kremlib.h"
#include "testlib.h"

typedef uint8_t Crypto_Symmetric_Poly1305_Bigint_u8;

typedef uint64_t Crypto_Symmetric_Poly1305_Bigint_u64;

typedef FStar_HyperStack_mem Crypto_Symmetric_Poly1305_Bigint_heap;

typedef Prims_pos (*Crypto_Symmetric_Poly1305_Bigint_template)(Prims_nat x0);

typedef uint64_t *Crypto_Symmetric_Poly1305_Bigint_bigint;

typedef uint8_t *Crypto_Symmetric_Poly1305_Bigint_bytes;

Prims_nat
Crypto_Symmetric_Poly1305_Bigint_bitweight(Prims_pos (*t)(Prims_nat x0), Prims_nat n);

void Crypto_Symmetric_Poly1305_Bigint_bitweight_def(Prims_pos (*t)(Prims_nat x0), Prims_nat n);

Prims_nat
Crypto_Symmetric_Poly1305_Bigint_eval(FStar_HyperStack_mem h, uint64_t *b, Prims_nat n);

void
Crypto_Symmetric_Poly1305_Bigint_eval_def(FStar_HyperStack_mem h, uint64_t *b, Prims_nat n);

Prims_nat
Crypto_Symmetric_Poly1305_Bigint_eval_bytes(FStar_HyperStack_mem h, uint8_t *b, Prims_nat n);

Prims_nat
Crypto_Symmetric_Poly1305_Bigint_maxValue(FStar_HyperStack_mem h, uint64_t *b, Prims_pos l);

void
Crypto_Symmetric_Poly1305_Bigint_maxValue_increases(
  FStar_HyperStack_mem h,
  uint64_t *b,
  Prims_pos n,
  Prims_pos m
);

void
Crypto_Symmetric_Poly1305_Bigint_maxValue_lemma_aux(
  FStar_HyperStack_mem h,
  uint64_t *b,
  Prims_pos l
);

void Crypto_Symmetric_Poly1305_Bigint_maxValue_lemma(FStar_HyperStack_mem h, uint64_t *b);

void
Crypto_Symmetric_Poly1305_Bigint_maxValue_bound_lemma_aux(
  FStar_HyperStack_mem h,
  uint64_t *b,
  Prims_pos l,
  Prims_nat bound
);

void
Crypto_Symmetric_Poly1305_Bigint_maxValue_bound_lemma(
  FStar_HyperStack_mem h,
  uint64_t *b,
  Prims_nat bound
);

Prims_nat Crypto_Symmetric_Poly1305_Bigint_maxValueNorm(FStar_HyperStack_mem h, uint64_t *b);

Prims_nat
Crypto_Symmetric_Poly1305_Bigint_maxValueIdx(FStar_HyperStack_mem h, uint64_t *b, Prims_pos l);

void
Crypto_Symmetric_Poly1305_Bigint_maxValue_eq_lemma(
  FStar_HyperStack_mem ha,
  FStar_HyperStack_mem hb,
  uint64_t *a,
  uint64_t *b,
  Prims_pos l
);

void
Crypto_Symmetric_Poly1305_Bigint_maxValueNorm_eq_lemma(
  FStar_HyperStack_mem ha,
  FStar_HyperStack_mem hb,
  uint64_t *a,
  uint64_t *b
);

void
Crypto_Symmetric_Poly1305_Bigint_eval_eq_lemma(
  FStar_HyperStack_mem ha,
  FStar_HyperStack_mem hb,
  uint64_t *a,
  uint64_t *b,
  Prims_nat len
);

void
Crypto_Symmetric_Poly1305_Bigint_norm_eq_lemma(
  FStar_HyperStack_mem ha,
  FStar_HyperStack_mem hb,
  uint64_t *a,
  uint64_t *b
);

void
Crypto_Symmetric_Poly1305_Bigint_eval_partial_eq_lemma(
  FStar_HyperStack_mem ha,
  FStar_HyperStack_mem hb,
  uint64_t *a,
  uint64_t *b,
  Prims_nat ctr,
  Prims_nat len
);

void
Crypto_Symmetric_Poly1305_Bigint_eval_null(FStar_HyperStack_mem h, uint64_t *b, Prims_nat len);

void
Crypto_Symmetric_Poly1305_Bigint_max_value_of_null_lemma(
  FStar_HyperStack_mem h,
  uint64_t *b,
  Prims_pos l
);
#endif
