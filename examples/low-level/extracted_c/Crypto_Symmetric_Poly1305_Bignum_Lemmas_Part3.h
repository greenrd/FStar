/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_H
#define __Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2.h"
#include "kremlib.h"
#include "testlib.h"

void Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_div_def(Prims_nat a, Prims_pos b);

void Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_mod_a_b(Prims_pos a, Prims_nat b);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_modulo_mul(
  Prims_nat a,
  Prims_nat b,
  Prims_pos p
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_modulo_add(
  Prims_nat a,
  Prims_nat b,
  Prims_pos p
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_modulo_9_0(
  Prims_nat f,
  Prims_nat g,
  Prims_nat h,
  Prims_nat i
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_modulo_9_1(
  Prims_nat f,
  Prims_nat g,
  Prims_nat h,
  Prims_nat i
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_modulo_9_2(
  Prims_nat f,
  Prims_nat g,
  Prims_nat h,
  Prims_nat i
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_modulo_9_3(
  Prims_nat f,
  Prims_nat g,
  Prims_nat h,
  Prims_nat i
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_modulo_9(
  Prims_nat a,
  Prims_nat b,
  Prims_nat c,
  Prims_nat d,
  Prims_nat e,
  Prims_nat f,
  Prims_nat g,
  Prims_nat h,
  Prims_nat i
);

void Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_2_130_modulo_prime();

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_freduce_degree_0(
  FStar_HyperStack_mem h,
  uint64_t *b
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_freduce_degree1(
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1,
  uint64_t *b
);

void Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_modulo_00(Prims_nat a, Prims_pos b);

void Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_mul_nat(Prims_nat a, Prims_nat b);

void Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_pow2_modulo_prime0();

void Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_pow2_modulo_prime();

void Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_2_26_p(Prims_nat a);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_freduce_degree2(
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1,
  uint64_t *b
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3_lemma_freduce_degree(
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1,
  uint64_t *b
);
#endif
