/* This file auto-generated by KreMLin! */
#ifndef __Crypto_AEAD_Invariant_H
#define __Crypto_AEAD_Invariant_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part4.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part5.h"
#include "FStar_Buffer_Quantifiers.h"
#include "Crypto_Symmetric_Chacha20.h"
#include "Crypto_Indexing.h"
#include "Flag.h"
#include "Crypto_Symmetric_AES.h"
#include "Crypto_Symmetric_AES128.h"
#include "Crypto_Symmetric_Cipher.h"
#include "Crypto_Symmetric_Poly1305_Lemmas.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part6.h"
#include "Crypto_Symmetric_Poly1305_Bignum.h"
#include "Crypto_Symmetric_Poly1305.h"
#include "Crypto_Symmetric_GF128_Spec.h"
#include "Crypto_Symmetric_GF128.h"
#include "Crypto_Symmetric_MAC.h"
#include "Crypto_Symmetric_UF1CMA.h"
#include "Crypto_Plain.h"
#include "Crypto_Symmetric_PRF.h"
#include "Crypto_AEAD_Encoding.h"
#include "kremlib.h"
#include "testlib.h"

uint32_t Crypto_AEAD_Invariant_min(uint32_t a, uint32_t b);

Prims_nat Crypto_AEAD_Invariant_minNat(Prims_nat a, Prims_nat b);

typedef FStar_HyperHeap_rid Crypto_AEAD_Invariant_region;

uint32_t
Crypto_AEAD_Invariant_ctr(Crypto_Indexing_id uu____48, Crypto_Symmetric_PRF_domain____ x);

typedef struct {
  FStar_UInt128_t x00;
  void *x01;
  Prims_nat x02;
  void *x03;
  void *x04;
}
Crypto_AEAD_Invariant_entry____;

FStar_UInt128_t
Crypto_AEAD_Invariant____Entry___nonce(
  Crypto_Indexing_id i,
  Crypto_AEAD_Invariant_entry____ projectee
);

void
*Crypto_AEAD_Invariant____Entry___ad(
  Crypto_Indexing_id i,
  Crypto_AEAD_Invariant_entry____ projectee
);

Prims_nat
Crypto_AEAD_Invariant____Entry___l(
  Crypto_Indexing_id i,
  Crypto_AEAD_Invariant_entry____ projectee
);

void
*Crypto_AEAD_Invariant____Entry___p(
  Crypto_Indexing_id i,
  Crypto_AEAD_Invariant_entry____ projectee
);

void
*Crypto_AEAD_Invariant____Entry___c(
  Crypto_Indexing_id i,
  Crypto_AEAD_Invariant_entry____ projectee
);

bool
Crypto_AEAD_Invariant_is_entry_nonce(
  Crypto_Indexing_id i,
  FStar_UInt128_t n,
  Crypto_AEAD_Invariant_entry____ e
);

typedef struct {
  enum {
    Prims_option__Crypto_AEAD_Invariant_entry_____None,
    Prims_option__Crypto_AEAD_Invariant_entry_____Some
  }
  tag;
  union {
    struct {  } case_None;
    struct { Crypto_AEAD_Invariant_entry____ v; } case_Some;
  }
  ;
}
Prims_option__Crypto_AEAD_Invariant_entry____;

Prims_option__Crypto_AEAD_Invariant_entry____
Crypto_AEAD_Invariant_find_entry(Crypto_Indexing_id i, FStar_UInt128_t n, void *entries);

typedef struct {
  FStar_HyperHeap_rid x00;
  void *x01;
  Crypto_Symmetric_PRF_state____ x02;
  Prims_option__uint8_t_ x03;
}
Crypto_AEAD_Invariant_state_______;

FStar_HyperHeap_rid
Crypto_AEAD_Invariant____State___log_region(
  Crypto_Indexing_id i,
  Crypto_Indexing_rw rw,
  Crypto_AEAD_Invariant_state_______ projectee
);

void
*Crypto_AEAD_Invariant____State___log(
  Crypto_Indexing_id i,
  Crypto_Indexing_rw rw,
  Crypto_AEAD_Invariant_state_______ projectee
);

Crypto_Symmetric_PRF_state____
Crypto_AEAD_Invariant____State___prf(
  Crypto_Indexing_id i,
  Crypto_Indexing_rw rw,
  Crypto_AEAD_Invariant_state_______ projectee
);

Prims_option__uint8_t_
Crypto_AEAD_Invariant____State___ak(
  Crypto_Indexing_id i,
  Crypto_Indexing_rw rw,
  Crypto_AEAD_Invariant_state_______ projectee
);

Prims_pos Crypto_AEAD_Invariant_maxplain(Crypto_Indexing_id i);

bool Crypto_AEAD_Invariant_safelen(Crypto_Indexing_id i, Prims_nat l, uint32_t c);

void
*Crypto_AEAD_Invariant_counterblocks(
  Crypto_Indexing_id i,
  FStar_HyperHeap_rid rgn,
  Crypto_Symmetric_PRF_domain____ x,
  Prims_nat l,
  Prims_nat from_pos,
  Prims_nat to_pos,
  void *plain,
  void *cipher
);

Prims_nat Crypto_AEAD_Invariant_num_blocks_(Crypto_Indexing_id i, Prims_nat l);

Prims_nat
Crypto_AEAD_Invariant_num_blocks(Crypto_Indexing_id i, Crypto_AEAD_Invariant_entry____ e);

void
Crypto_AEAD_Invariant_refines(
  FStar_HyperStack_mem h,
  Crypto_Indexing_id i,
  FStar_HyperHeap_rid rgn,
  void *entries,
  void *blocks
);
#endif
