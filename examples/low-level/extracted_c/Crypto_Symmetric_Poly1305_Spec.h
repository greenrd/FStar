/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Symmetric_Poly1305_Spec_H
#define __Crypto_Symmetric_Poly1305_Spec_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "kremlib.h"
#include "testlib.h"

extern Prims_nat Crypto_Symmetric_Poly1305_Spec_p_1305;

typedef Prims_nat Crypto_Symmetric_Poly1305_Spec_elem;

typedef void *Crypto_Symmetric_Poly1305_Spec_word;

typedef void *Crypto_Symmetric_Poly1305_Spec_word_16;

extern uint32_t Crypto_Symmetric_Poly1305_Spec_taglen;

typedef void *Crypto_Symmetric_Poly1305_Spec_text;

extern void *Crypto_Symmetric_Poly1305_Spec_zero;

typedef void *Crypto_Symmetric_Poly1305_Spec_tag;

Prims_nat Crypto_Symmetric_Poly1305_Spec_field_add(Prims_nat a, Prims_nat b);

Prims_nat Crypto_Symmetric_Poly1305_Spec_field_mul(Prims_nat a, Prims_nat b);

Prims_nat Crypto_Symmetric_Poly1305_Spec_op_Plus_At(Prims_nat x0, Prims_nat x1);

Prims_nat Crypto_Symmetric_Poly1305_Spec_op_Star_At(Prims_nat x0, Prims_nat x1);

Prims_nat Crypto_Symmetric_Poly1305_Spec_encode(void *w);

Prims_nat Crypto_Symmetric_Poly1305_Spec_trunc_1305(Prims_nat e);

Prims_nat Crypto_Symmetric_Poly1305_Spec_poly(void *vs, Prims_nat r);

bool Crypto_Symmetric_Poly1305_Spec_eq_poly0(void *p);

bool Crypto_Symmetric_Poly1305_Spec_eq_poly(void *p0, void *p1);

Prims_nat Crypto_Symmetric_Poly1305_Spec_clamp(void *r);

void *Crypto_Symmetric_Poly1305_Spec_finish(Prims_nat a, void *s);

void *Crypto_Symmetric_Poly1305_Spec_mac_1305(void *vs, Prims_nat r, void *s);
#endif
