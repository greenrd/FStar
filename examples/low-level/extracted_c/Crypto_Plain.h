/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Plain_H
#define __Crypto_Plain_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part4.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part5.h"
#include "FStar_Buffer_Quantifiers.h"
#include "Crypto_Symmetric_Chacha20.h"
#include "Crypto_Indexing.h"
#include "Flag.h"
#include "Crypto_Symmetric_AES.h"
#include "Crypto_Symmetric_AES128.h"
#include "Crypto_Symmetric_Cipher.h"
#include "Crypto_Symmetric_Poly1305_Lemmas.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part6.h"
#include "Crypto_Symmetric_Poly1305_Bignum.h"
#include "Crypto_Symmetric_Poly1305.h"
#include "Crypto_Symmetric_GF128_Spec.h"
#include "Crypto_Symmetric_GF128.h"
#include "Crypto_Symmetric_MAC.h"
#include "Crypto_Symmetric_UF1CMA.h"
#include "kremlib.h"
#include "testlib.h"

typedef Prims_nat Crypto_Plain_plainLen;

void *Crypto_Plain_as_bytes(Crypto_Indexing_id i, Prims_nat l, void *p);

void *Crypto_Plain_repr(Crypto_Indexing_id i, Prims_nat l, void *p);

void *Crypto_Plain_make(Crypto_Indexing_id i, Prims_nat l, void *b);

void *Crypto_Plain_slice(Crypto_Indexing_id i, Prims_nat l, void *p, Prims_nat s, Prims_nat j);

uint8_t *Crypto_Plain_as_buffer(Crypto_Indexing_id i, Prims_nat l, uint8_t *pb);

uint8_t *Crypto_Plain_unsafe_hide_buffer(Crypto_Indexing_id i, Prims_nat l, uint8_t *b);

uint8_t *Crypto_Plain_hide_buffer(Crypto_Indexing_id i, Prims_nat l, uint8_t *b);

void Crypto_Plain_as_buffer_injective(Crypto_Indexing_id i, Prims_nat l, uint8_t *p);

void
*Crypto_Plain_sel_plain(FStar_HyperStack_mem h, Crypto_Indexing_id i, uint32_t l, uint8_t *buf);

uint8_t *Crypto_Plain_bufferRepr(Crypto_Indexing_id i, Prims_nat l, uint8_t *b);

uint8_t
*Crypto_Plain_sub(Crypto_Indexing_id id, Prims_nat l, uint8_t *b, uint32_t i, uint32_t len);

void *Crypto_Plain_load(Crypto_Indexing_id i, uint32_t l, uint8_t *buf);

void Crypto_Plain_store(Crypto_Indexing_id i, uint32_t l, uint8_t *buf, void *b);
#endif
