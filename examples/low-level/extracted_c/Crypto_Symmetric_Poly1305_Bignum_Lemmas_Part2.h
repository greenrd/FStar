/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2_H
#define __Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "kremlib.h"
#include "testlib.h"

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2_lemma_swap(
  Prims_int p1,
  Prims_int a,
  Prims_int p2,
  Prims_int b
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2_lemma_multiplication1(
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1,
  uint64_t *c,
  uint64_t *a,
  uint64_t *b
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2_lemma_mul_ineq(
  Prims_nat a,
  Prims_nat b,
  Prims_int c,
  Prims_int d
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2_lemma_multiplication2(
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1,
  uint64_t *c,
  uint64_t *a,
  uint64_t *b
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2_lemma_multiplication(
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1,
  uint64_t *c,
  uint64_t *a,
  uint64_t *b
);
#endif
