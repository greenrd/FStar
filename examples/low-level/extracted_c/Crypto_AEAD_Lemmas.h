/* This file auto-generated by KreMLin! */
#ifndef __Crypto_AEAD_Lemmas_H
#define __Crypto_AEAD_Lemmas_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part4.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part5.h"
#include "FStar_Buffer_Quantifiers.h"
#include "Crypto_Symmetric_Chacha20.h"
#include "Crypto_Indexing.h"
#include "Flag.h"
#include "Crypto_Symmetric_AES.h"
#include "Crypto_Symmetric_AES128.h"
#include "Crypto_Symmetric_Cipher.h"
#include "Crypto_Symmetric_Poly1305_Lemmas.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part6.h"
#include "Crypto_Symmetric_Poly1305_Bignum.h"
#include "Crypto_Symmetric_Poly1305.h"
#include "Crypto_Symmetric_GF128_Spec.h"
#include "Crypto_Symmetric_GF128.h"
#include "Crypto_Symmetric_MAC.h"
#include "Crypto_Symmetric_UF1CMA.h"
#include "Crypto_Plain.h"
#include "Crypto_Symmetric_PRF.h"
#include "Crypto_AEAD_Encoding.h"
#include "Crypto_AEAD_Invariant.h"
#include "kremlib.h"
#include "testlib.h"

uint32_t Crypto_AEAD_Lemmas_u(Prims_int n);

typedef void *Crypto_AEAD_Lemmas_eqtype;

void
Crypto_AEAD_Lemmas_frame_pre_refines(
  Crypto_Indexing_id i,
  Crypto_AEAD_Invariant_state_______ st,
  FStar_UInt128_t nonce,
  Prims_nat len,
  uint8_t *plainb,
  uint8_t *cipherb,
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1,
  FStar_HyperStack_mem h2
);

void
Crypto_AEAD_Lemmas_frame_pre_refines_0(
  Crypto_Indexing_id i,
  Crypto_AEAD_Invariant_state_______ st,
  FStar_UInt128_t nonce,
  Prims_nat len,
  uint8_t *plainb,
  uint8_t *cipherb,
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1,
  FStar_HyperStack_mem h2
);

void
Crypto_AEAD_Lemmas_counterblocks_len(
  Crypto_Indexing_id i,
  FStar_HyperHeap_rid rgn,
  Crypto_Symmetric_PRF_domain____ x,
  Prims_nat len,
  Prims_nat from_pos,
  void *plain,
  void *cipher
);

void
Crypto_AEAD_Lemmas_intro_refines_one_entry_no_tag(
  Crypto_Indexing_id i,
  Crypto_AEAD_Invariant_state_______ st,
  FStar_UInt128_t nonce,
  Prims_nat len,
  uint8_t *plain,
  uint8_t *cipher,
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1,
  FStar_HyperStack_mem h2
);

void
Crypto_AEAD_Lemmas_intro_mac_refines(
  Crypto_Indexing_id i,
  Crypto_AEAD_Invariant_state_______ st,
  FStar_UInt128_t nonce,
  uint32_t aadlen,
  uint8_t *aad,
  Prims_nat len,
  uint8_t *plain,
  uint8_t *cipher,
  FStar_HyperStack_mem h
);

void
Crypto_AEAD_Lemmas_all_above_counterblocks(
  Crypto_Indexing_id i,
  FStar_HyperHeap_rid rgn,
  Crypto_Symmetric_PRF_domain____ x,
  Prims_nat l,
  Prims_nat from_pos,
  Prims_nat to_pos,
  void *plain,
  void *cipher
);

void
Crypto_AEAD_Lemmas_find_mac_counterblocks_none(
  FStar_HyperHeap_rid rgn,
  Crypto_Indexing_id i,
  FStar_UInt128_t nonce,
  void *s
);

void
Crypto_AEAD_Lemmas_find_append(
  Crypto_Indexing_id i,
  FStar_HyperHeap_rid r,
  Crypto_Symmetric_PRF_domain____ d,
  void *s1,
  void *s2
);

void
Crypto_AEAD_Lemmas_pre_refines_to_refines(
  Crypto_Indexing_id i,
  Crypto_AEAD_Invariant_state_______ st,
  FStar_UInt128_t nonce,
  uint32_t aadlen,
  uint8_t *aad,
  Prims_nat len,
  uint8_t *plain,
  uint8_t *cipher,
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h
);

void
Crypto_AEAD_Lemmas_frame_refines_one_entry(
  FStar_HyperStack_mem h,
  Crypto_Indexing_id i,
  FStar_HyperHeap_rid mac_rgn,
  Crypto_AEAD_Invariant_entry____ e,
  void *blocks,
  FStar_HyperStack_mem h_
);

void
Crypto_AEAD_Lemmas_extend_refines(
  FStar_HyperStack_mem h,
  Crypto_Indexing_id i,
  FStar_HyperHeap_rid mac_rgn,
  void *entries,
  void *blocks,
  Crypto_AEAD_Invariant_entry____ e,
  void *blocks_for_e,
  FStar_HyperStack_mem h_
);

void
Crypto_AEAD_Lemmas_counterblocks_emp(
  Crypto_Indexing_id i,
  FStar_HyperHeap_rid rgn,
  Crypto_Symmetric_PRF_domain____ x,
  Prims_nat l,
  Prims_nat to_pos,
  void *plain,
  void *cipher
);

uint32_t Crypto_AEAD_Lemmas_offset(Crypto_Indexing_id i);

void
Crypto_AEAD_Lemmas_counterblocks_snoc(
  Crypto_Indexing_id i,
  FStar_HyperHeap_rid rgn,
  Crypto_Symmetric_PRF_domain____ x,
  Prims_nat k,
  Prims_nat len,
  Prims_nat next,
  Prims_nat completed_len,
  void *plain,
  void *cipher
);

void
Crypto_AEAD_Lemmas_counterblocks_slice(
  Crypto_Indexing_id i,
  FStar_HyperHeap_rid rgn,
  Crypto_Symmetric_PRF_domain____ x,
  Prims_nat len,
  Prims_nat from_pos,
  Prims_nat to_pos,
  void *plain,
  void *cipher
);

void
Crypto_AEAD_Lemmas_frame_counterblocks_snoc(
  Crypto_Indexing_id i,
  Crypto_Symmetric_PRF_state____ t,
  Crypto_Symmetric_PRF_domain____ x,
  Prims_nat k,
  Prims_nat len,
  Prims_nat completed_len,
  uint8_t *plain,
  uint8_t *cipher,
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1
);

void
Crypto_AEAD_Lemmas_extending_counter_blocks(
  Crypto_Indexing_id i,
  Crypto_Symmetric_PRF_state____ t,
  Crypto_Symmetric_PRF_domain____ x,
  Prims_nat len,
  Prims_nat completed_len,
  uint8_t *plain,
  uint8_t *cipher,
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1,
  FStar_HyperStack_mem h_init
);
#endif
