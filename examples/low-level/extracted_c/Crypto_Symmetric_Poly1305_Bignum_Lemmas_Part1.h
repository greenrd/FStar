/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_H
#define __Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "kremlib.h"
#include "testlib.h"

extern void *Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_prime;

Prims_int Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_w(uint32_t x0);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_lemma_fsum_0(
  uint64_t a0,
  uint64_t a1,
  uint64_t a2,
  uint64_t a3,
  uint64_t a4,
  uint64_t b0,
  uint64_t b1,
  uint64_t b2,
  uint64_t b3,
  uint64_t b4
);

void Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_lemma_bitweight_values();

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_lemma_eval_bigint_5(
  FStar_HyperStack_mem h,
  uint64_t *b
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_lemma_eval_bigint_6(
  FStar_HyperStack_mem h,
  uint64_t *b
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_lemma_eval_bigint_9(
  FStar_HyperStack_mem h,
  uint64_t *b
);

void Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_factorization_lemma();

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_lemma_fsum(
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1,
  uint64_t *a,
  uint64_t *b
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_lemma_multiplication_0(
  uint64_t a0,
  uint64_t a1,
  uint64_t a2,
  uint64_t a3,
  uint64_t a4,
  uint64_t b0,
  uint64_t b1,
  uint64_t b2,
  uint64_t b3,
  uint64_t b4
);

typedef uint64_t Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_u27;

typedef uint64_t Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_u26;

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_lemma_multiplication00(
  Prims_int a,
  Prims_int b,
  Prims_int c
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_lemma_multiplication01(
  Prims_int a,
  Prims_int b,
  Prims_int c,
  Prims_int d
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_lemma_multiplication02(
  Prims_int a,
  Prims_int b,
  Prims_int c,
  Prims_int d,
  Prims_int e
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_lemma_multiplication03(
  Prims_int a,
  Prims_int b,
  Prims_int c,
  Prims_int d,
  Prims_int e,
  Prims_int f
);

void
Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1_lemma_multiplication05(
  Prims_int a0,
  Prims_int a1,
  Prims_int a2,
  Prims_int a3,
  Prims_int a4,
  Prims_int b0,
  Prims_int b1,
  Prims_int b2,
  Prims_int b3,
  Prims_int b4
);
#endif
