/* This file auto-generated by KreMLin! */
#ifndef __FStar_UInt_H
#define __FStar_UInt_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "kremlib.h"
#include "testlib.h"

Prims_int FStar_UInt_max_int(Prims_nat n);

Prims_int FStar_UInt_min_int(Prims_nat n);

bool FStar_UInt_fits(Prims_int x, Prims_nat n);

Prims_int FStar_UInt_zero(Prims_nat n);

Prims_int FStar_UInt_pow2_n(Prims_pos n, Prims_nat p);

Prims_int FStar_UInt_one(Prims_pos n);

Prims_int FStar_UInt_ones(Prims_nat n);

Prims_int FStar_UInt_incr(Prims_nat n, Prims_int a);

Prims_int FStar_UInt_decr(Prims_nat n, Prims_int a);

Prims_int FStar_UInt_incr_underspec(Prims_nat n, Prims_int a);

Prims_int FStar_UInt_decr_underspec(Prims_nat n, Prims_int a);

Prims_int FStar_UInt_incr_mod(Prims_nat n, Prims_int a);

Prims_int FStar_UInt_decr_mod(Prims_nat n, Prims_int a);

Prims_int FStar_UInt_add(Prims_nat n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_add_underspec(Prims_nat n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_add_mod(Prims_nat n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_sub(Prims_nat n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_sub_underspec(Prims_nat n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_sub_mod(Prims_nat n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_mul(Prims_nat n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_mul_underspec(Prims_nat n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_mul_mod(Prims_nat n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_div(Prims_nat n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_div_underspec(Prims_nat n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_mod_(Prims_nat n, Prims_int a, Prims_int b);

bool FStar_UInt_eq(Prims_nat n, Prims_int a, Prims_int b);

bool FStar_UInt_gt(Prims_nat n, Prims_int a, Prims_int b);

bool FStar_UInt_gte(Prims_nat n, Prims_int a, Prims_int b);

bool FStar_UInt_lt(Prims_nat n, Prims_int a, Prims_int b);

bool FStar_UInt_lte(Prims_nat n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_to_uint_t(Prims_nat m, Prims_int a);

void *FStar_UInt_to_vec(Prims_nat n, Prims_int num);

Prims_int FStar_UInt_from_vec(Prims_nat n, void *vec);

void FStar_UInt_to_vec_lemma_1(Prims_nat n, Prims_int a, Prims_int b);

void FStar_UInt_to_vec_lemma_2(Prims_nat n, Prims_int a, Prims_int b);

void FStar_UInt_inverse_aux(Prims_nat n, void *vec, Prims_nat i);

void FStar_UInt_inverse_vec_lemma(Prims_nat n, void *vec);

void FStar_UInt_inverse_num_lemma(Prims_nat n, Prims_int num);

void FStar_UInt_from_vec_lemma_1(Prims_nat n, void *a, void *b);

void FStar_UInt_from_vec_lemma_2(Prims_nat n, void *a, void *b);

void FStar_UInt_from_vec_aux(Prims_nat n, void *a, Prims_nat s1, Prims_nat s2);

void
FStar_UInt_seq_slice_lemma(
  Prims_nat n,
  void *a,
  Prims_nat s1,
  Prims_nat t1,
  Prims_nat s2,
  Prims_nat t2
);

void FStar_UInt_from_vec_propriety(Prims_pos n, void *a, Prims_nat s);

void FStar_UInt_append_lemma(Prims_pos n, Prims_pos m, void *a, void *b);

void FStar_UInt_slice_left_lemma(Prims_pos n, void *a, Prims_pos s);

void FStar_UInt_slice_right_lemma(Prims_pos n, void *a, Prims_pos s);

void FStar_UInt_zero_to_vec_lemma(Prims_pos n, Prims_nat i);

void FStar_UInt_zero_from_vec_lemma(Prims_pos n);

void FStar_UInt_one_to_vec_lemma(Prims_pos n, Prims_nat i);

void FStar_UInt_pow2_to_vec_lemma(Prims_pos n, Prims_nat p, Prims_nat i);

void FStar_UInt_pow2_from_vec_lemma(Prims_pos n, Prims_nat p);

void FStar_UInt_ones_to_vec_lemma(Prims_pos n, Prims_nat i);

void FStar_UInt_ones_from_vec_lemma(Prims_pos n);

bool FStar_UInt_nth(Prims_pos n, Prims_int a, Prims_nat i);

void FStar_UInt_nth_lemma(Prims_pos n, Prims_int a, Prims_int b);

void FStar_UInt_zero_nth_lemma(Prims_pos n, Prims_nat i);

void FStar_UInt_pow2_nth_lemma(Prims_pos n, Prims_nat p, Prims_nat i);

void FStar_UInt_one_nth_lemma(Prims_pos n, Prims_nat i);

void FStar_UInt_ones_nth_lemma(Prims_pos n, Prims_nat i);

Prims_int FStar_UInt_logand(Prims_pos n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_logxor(Prims_pos n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_logor(Prims_pos n, Prims_int a, Prims_int b);

Prims_int FStar_UInt_lognot(Prims_pos n, Prims_int a);

void FStar_UInt_logand_definition(Prims_pos n, Prims_int a, Prims_int b, Prims_nat i);

void FStar_UInt_logxor_definition(Prims_pos n, Prims_int a, Prims_int b, Prims_nat i);

void FStar_UInt_logor_definition(Prims_pos n, Prims_int a, Prims_int b, Prims_nat i);

void FStar_UInt_lognot_definition(Prims_pos n, Prims_int a, Prims_nat i);

void FStar_UInt_logand_commutative(Prims_pos n, Prims_int a, Prims_int b);

void FStar_UInt_logand_associative(Prims_pos n, Prims_int a, Prims_int b, Prims_int c);

void FStar_UInt_logand_self(Prims_pos n, Prims_int a);

void FStar_UInt_logand_lemma_1(Prims_pos n, Prims_int a);

void FStar_UInt_logand_lemma_2(Prims_pos n, Prims_int a);

void FStar_UInt_logxor_commutative(Prims_pos n, Prims_int a, Prims_int b);

void FStar_UInt_logxor_associative(Prims_pos n, Prims_int a, Prims_int b, Prims_int c);

void FStar_UInt_logxor_self(Prims_pos n, Prims_int a);

void FStar_UInt_logxor_lemma_1(Prims_pos n, Prims_int a);

void FStar_UInt_logxor_lemma_2(Prims_pos n, Prims_int a);

void FStar_UInt_logxor_inv(Prims_pos n, Prims_int a, Prims_int b);

void FStar_UInt_logor_commutative(Prims_pos n, Prims_int a, Prims_int b);

void FStar_UInt_logor_associative(Prims_pos n, Prims_int a, Prims_int b, Prims_int c);

void FStar_UInt_logor_self(Prims_pos n, Prims_int a);

void FStar_UInt_logor_lemma_1(Prims_pos n, Prims_int a);

void FStar_UInt_logor_lemma_2(Prims_pos n, Prims_int a);

void FStar_UInt_lognot_self(Prims_pos n, Prims_int a);

void FStar_UInt_lognot_lemma_1(Prims_pos n);

void FStar_UInt_logor_disjoint(Prims_pos n, Prims_int a, Prims_int b, Prims_pos m);

void FStar_UInt_logand_mask(Prims_pos n, Prims_int a, Prims_pos m);

Prims_int FStar_UInt_shift_left(Prims_pos n, Prims_int a, Prims_nat s);

Prims_int FStar_UInt_shift_right(Prims_pos n, Prims_int a, Prims_nat s);

void FStar_UInt_shift_left_lemma_1(Prims_pos n, Prims_int a, Prims_nat s, Prims_nat i);

void FStar_UInt_shift_left_lemma_2(Prims_pos n, Prims_int a, Prims_nat s, Prims_nat i);

void FStar_UInt_shift_right_lemma_1(Prims_pos n, Prims_int a, Prims_nat s, Prims_nat i);

void FStar_UInt_shift_right_lemma_2(Prims_pos n, Prims_int a, Prims_nat s, Prims_nat i);

void FStar_UInt_shift_left_logand_lemma(Prims_pos n, Prims_int a, Prims_int b, Prims_nat s);

void FStar_UInt_shift_right_logand_lemma(Prims_pos n, Prims_int a, Prims_int b, Prims_nat s);

void FStar_UInt_shift_left_logxor_lemma(Prims_pos n, Prims_int a, Prims_int b, Prims_nat s);

void FStar_UInt_shift_right_logxor_lemma(Prims_pos n, Prims_int a, Prims_int b, Prims_nat s);

void FStar_UInt_shift_left_logor_lemma(Prims_pos n, Prims_int a, Prims_int b, Prims_nat s);

void FStar_UInt_shift_right_logor_lemma(Prims_pos n, Prims_int a, Prims_int b, Prims_nat s);

void FStar_UInt_shift_left_value_aux_1(Prims_pos n, Prims_int a, Prims_nat s);

void FStar_UInt_shift_left_value_aux_2(Prims_pos n, Prims_int a);

void FStar_UInt_shift_left_value_aux_3(Prims_pos n, Prims_int a, Prims_pos s);

void FStar_UInt_shift_left_value_lemma(Prims_pos n, Prims_int a, Prims_nat s);

void FStar_UInt_shift_right_value_aux_1(Prims_pos n, Prims_int a, Prims_nat s);

void FStar_UInt_shift_right_value_aux_2(Prims_pos n, Prims_int a);

void FStar_UInt_shift_right_value_aux_3(Prims_pos n, Prims_int a, Prims_pos s);

void FStar_UInt_shift_right_value_lemma(Prims_pos n, Prims_int a, Prims_nat s);
#endif
