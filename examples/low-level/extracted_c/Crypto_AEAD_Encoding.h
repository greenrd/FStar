/* This file auto-generated by KreMLin! */
#ifndef __Crypto_AEAD_Encoding_H
#define __Crypto_AEAD_Encoding_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part4.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part5.h"
#include "FStar_Buffer_Quantifiers.h"
#include "Crypto_Symmetric_Chacha20.h"
#include "Crypto_Indexing.h"
#include "Flag.h"
#include "Crypto_Symmetric_AES.h"
#include "Crypto_Symmetric_AES128.h"
#include "Crypto_Symmetric_Cipher.h"
#include "Crypto_Symmetric_Poly1305_Lemmas.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part6.h"
#include "Crypto_Symmetric_Poly1305_Bignum.h"
#include "Crypto_Symmetric_Poly1305.h"
#include "Crypto_Symmetric_GF128_Spec.h"
#include "Crypto_Symmetric_GF128.h"
#include "Crypto_Symmetric_MAC.h"
#include "Crypto_Symmetric_UF1CMA.h"
#include "Crypto_Plain.h"
#include "Crypto_Symmetric_PRF.h"
#include "kremlib.h"
#include "testlib.h"

typedef FStar_HyperHeap_rid Crypto_AEAD_Encoding_region;

Crypto_Indexing_cipherAlg Crypto_AEAD_Encoding_alg(Crypto_Indexing_id i);

typedef FStar_HyperHeap_rid Crypto_AEAD_Encoding_rgn;

extern uint32_t Crypto_AEAD_Encoding_txtmax;

extern uint32_t Crypto_AEAD_Encoding_aadmax;

typedef void *Crypto_AEAD_Encoding_adata;

typedef uint32_t Crypto_AEAD_Encoding_aadlen_32;

typedef uint32_t Crypto_AEAD_Encoding_txtlen_32;

void *Crypto_AEAD_Encoding_pad_0(void *b, Prims_nat l);

void *Crypto_AEAD_Encoding_encode_bytes(void *txt);

void Crypto_AEAD_Encoding_lemma_encode_length(void *txt);

extern Prims_nat Crypto_AEAD_Encoding_p_1305;

void Crypto_AEAD_Encoding_lemma_pad_0_injective(void *b0, void *b1, Prims_nat l);

extern void Crypto_AEAD_Encoding_lemma_encode_bytes_injective(void *x0, void *x1);

void Crypto_AEAD_Encoding_pad_16(uint8_t *b, uint32_t len);

void
Crypto_AEAD_Encoding_add_bytes(
  K___Crypto_Indexing_id_FStar_UInt128_t i,
  Crypto_Symmetric_UF1CMA_state____ st,
  Crypto_Symmetric_UF1CMA_accBuffer____ a,
  uint32_t len,
  uint8_t *txt
);

void
*Crypto_AEAD_Encoding_encode_both(
  Crypto_Indexing_id i,
  uint32_t aadlen,
  void *aad,
  uint32_t txtlen,
  void *cipher
);

void
Crypto_AEAD_Encoding_lemma_encode_both_inj(
  Crypto_Indexing_id i,
  uint32_t al0,
  uint32_t pl0,
  uint32_t al1,
  uint32_t pl1,
  void *a0,
  void *p0,
  void *a1,
  void *p1
);
#endif
