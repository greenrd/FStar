/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Symmetric_Poly1305_Bignum_H
#define __Crypto_Symmetric_Poly1305_Bignum_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part4.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part5.h"
#include "FStar_Buffer_Quantifiers.h"
#include "Crypto_Symmetric_Chacha20.h"
#include "Crypto_Indexing.h"
#include "Flag.h"
#include "Crypto_Symmetric_AES.h"
#include "Crypto_Symmetric_AES128.h"
#include "Crypto_Symmetric_Cipher.h"
#include "Crypto_Symmetric_Poly1305_Lemmas.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part6.h"
#include "kremlib.h"
#include "testlib.h"

extern void *Crypto_Symmetric_Poly1305_Bignum_prime;

Prims_int Crypto_Symmetric_Poly1305_Bignum_w(uint32_t x0);

void Crypto_Symmetric_Poly1305_Bignum_fsum_(uint64_t *a, uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_fsum_0(uint64_t *a, uint64_t *b);

void
Crypto_Symmetric_Poly1305_Bignum_update_9(
  uint64_t *c,
  uint64_t c0,
  uint64_t c1,
  uint64_t c2,
  uint64_t c3,
  uint64_t c4,
  uint64_t c5,
  uint64_t c6,
  uint64_t c7,
  uint64_t c8
);

void
Crypto_Symmetric_Poly1305_Bignum_multiplication_0(
  uint64_t *c,
  uint64_t a0,
  uint64_t a1,
  uint64_t a2,
  uint64_t a3,
  uint64_t a4,
  uint64_t b0,
  uint64_t b1,
  uint64_t b2,
  uint64_t b3,
  uint64_t b4
);

void Crypto_Symmetric_Poly1305_Bignum_multiplication_(uint64_t *c, uint64_t *a, uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_multiplication(uint64_t *c, uint64_t *a, uint64_t *b);

uint64_t Crypto_Symmetric_Poly1305_Bignum_times_5(uint64_t b);

void Crypto_Symmetric_Poly1305_Bignum_freduce_degree_(uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_freduce_degree(uint64_t *b);

uint64_t Crypto_Symmetric_Poly1305_Bignum_mod2_26(uint64_t x);

uint64_t Crypto_Symmetric_Poly1305_Bignum_div2_26(uint64_t x);

void
Crypto_Symmetric_Poly1305_Bignum_update_6(
  uint64_t *c,
  uint64_t c0,
  uint64_t c1,
  uint64_t c2,
  uint64_t c3,
  uint64_t c4,
  uint64_t c5
);

void
Crypto_Symmetric_Poly1305_Bignum_carry_1_0(
  uint64_t *b,
  uint64_t b0,
  uint64_t b1,
  uint64_t b2,
  uint64_t b3,
  uint64_t b4
);

void Crypto_Symmetric_Poly1305_Bignum_carry_1_(uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_carry_1(uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_carry_2_(uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_carry_2(uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_carry_top_(uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_carry_top_1(uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_carry_top_2(uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_carry_0_to_1_(uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_carry_0_to_1(uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_freduce_coefficients(uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_modulo(uint64_t *b);

void Crypto_Symmetric_Poly1305_Bignum_finalize(uint64_t *b);
#endif
