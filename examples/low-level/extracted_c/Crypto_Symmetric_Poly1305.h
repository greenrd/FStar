/* This file auto-generated by KreMLin! */
#ifndef __Crypto_Symmetric_Poly1305_H
#define __Crypto_Symmetric_Poly1305_H


#include "Prims.h"
#include "FStar_Mul.h"
#include "FStar_Squash.h"
#include "FStar_StrongExcludedMiddle.h"
#include "FStar_List_Tot.h"
#include "FStar_Classical.h"
#include "FStar_ListProperties.h"
#include "FStar_SeqProperties.h"
#include "FStar_Math_Lemmas.h"
#include "FStar_BitVector.h"
#include "FStar_UInt.h"
#include "FStar_Int.h"
#include "FStar_FunctionalExtensionality.h"
#include "FStar_PropositionalExtensionality.h"
#include "FStar_PredicateExtensionality.h"
#include "FStar_TSet.h"
#include "FStar_Set.h"
#include "FStar_Map.h"
#include "FStar_Ghost.h"
#include "FStar_All.h"
#include "FStar_Bytes.h"
#include "FStar_Buffer.h"
#include "Buffer_Utils.h"
#include "Crypto_Symmetric_Bytes.h"
#include "Crypto_Symmetric_Poly1305_Spec.h"
#include "Crypto_Symmetric_Poly1305_Parameters.h"
#include "Crypto_Symmetric_Poly1305_Bigint.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part1.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part2.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part3.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part4.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part5.h"
#include "FStar_Buffer_Quantifiers.h"
#include "Crypto_Symmetric_Chacha20.h"
#include "Crypto_Indexing.h"
#include "Flag.h"
#include "Crypto_Symmetric_AES.h"
#include "Crypto_Symmetric_AES128.h"
#include "Crypto_Symmetric_Cipher.h"
#include "Crypto_Symmetric_Poly1305_Lemmas.h"
#include "Crypto_Symmetric_Poly1305_Bignum_Lemmas_Part6.h"
#include "Crypto_Symmetric_Poly1305_Bignum.h"
#include "kremlib.h"
#include "testlib.h"

typedef uint64_t *Crypto_Symmetric_Poly1305_elemB;

typedef uint8_t *Crypto_Symmetric_Poly1305_wordB;

typedef uint8_t *Crypto_Symmetric_Poly1305_wordB_16;

void *Crypto_Symmetric_Poly1305_sel_word(FStar_HyperStack_mem h, uint8_t *b);

void *Crypto_Symmetric_Poly1305__read_word(uint32_t len, uint8_t *b, void *s, uint32_t i);

void *Crypto_Symmetric_Poly1305_read_word(uint32_t len, uint8_t *b);

Prims_nat Crypto_Symmetric_Poly1305_sel_elem(FStar_HyperStack_mem h, uint64_t *b);

Prims_nat Crypto_Symmetric_Poly1305_sel_int(FStar_HyperStack_mem h, uint64_t *b);

void Crypto_Symmetric_Poly1305_lemma_bitweight_templ_values(Prims_nat n);

void
Crypto_Symmetric_Poly1305_lemma_eval_norm_is_bounded(
  FStar_HyperStack_mem ha,
  uint64_t *a,
  Prims_nat len
);

void
Crypto_Symmetric_Poly1305_lemma_elemB_equality(
  FStar_HyperStack_mem ha,
  FStar_HyperStack_mem hb,
  uint64_t *a,
  uint64_t *b,
  Prims_pos len
);

void
Crypto_Symmetric_Poly1305_lemma_toField_is_injective_0(
  FStar_HyperStack_mem ha,
  FStar_HyperStack_mem hb,
  uint64_t *a,
  uint64_t *b,
  Prims_nat len
);

void
Crypto_Symmetric_Poly1305_lemma_toField_is_injective(
  FStar_HyperStack_mem ha,
  FStar_HyperStack_mem hb,
  uint64_t *a,
  uint64_t *b
);

bool Crypto_Symmetric_Poly1305_print_elem(uint64_t *e, uint32_t i, uint32_t len);

void
Crypto_Symmetric_Poly1305_bound27_isSum(
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1,
  uint64_t *a,
  uint64_t *b
);

void
Crypto_Symmetric_Poly1305_lemma_sel_elem(
  FStar_HyperStack_mem h0,
  FStar_HyperStack_mem h1,
  uint64_t *acc,
  uint64_t *block,
  uint64_t *r
);

void Crypto_Symmetric_Poly1305_add_and_multiply(uint64_t *acc, uint64_t *block, uint64_t *r);

void Crypto_Symmetric_Poly1305_zeroB(uint64_t *a);

uint64_t Crypto_Symmetric_Poly1305_mk_mask(uint32_t nbits);

void
Crypto_Symmetric_Poly1305_lemma_toField_1(
  uint64_t *b,
  uint8_t *s,
  FStar_HyperStack_mem h,
  uint64_t n0,
  uint64_t n1,
  uint64_t n2,
  uint64_t n3
);

void
Crypto_Symmetric_Poly1305_upd_elemB(
  uint64_t *b,
  uint64_t n0,
  uint64_t n1,
  uint64_t n2,
  uint64_t n3,
  uint64_t n4
);

void
Crypto_Symmetric_Poly1305_lemma_toField_2(
  uint64_t n0,
  uint64_t n1,
  uint64_t n2,
  uint64_t n3,
  uint64_t n0_,
  uint64_t n1_,
  uint64_t n2_,
  uint64_t n3_,
  uint64_t n4_
);

void
Crypto_Symmetric_Poly1305_lemma_toField_3(
  uint64_t n0,
  uint64_t n1,
  uint64_t n2,
  uint64_t n3,
  uint64_t n0_,
  uint64_t n1_,
  uint64_t n2_,
  uint64_t n3_,
  uint64_t n4_
);

void Crypto_Symmetric_Poly1305_sel_int_sel_elem(FStar_HyperStack_mem h, uint64_t *a, void *w);

void Crypto_Symmetric_Poly1305_toField(uint64_t *b, uint8_t *s);

void
Crypto_Symmetric_Poly1305_lemma_toField_plus_2_128_0(FStar_HyperStack_mem ha, uint64_t *a);

void Crypto_Symmetric_Poly1305_lemma_toField_plus_2_128_1();

void
Crypto_Symmetric_Poly1305_lemma_toField_plus_2_128(
  FStar_HyperStack_mem ha,
  uint64_t *a,
  FStar_HyperStack_mem hb,
  uint64_t *b
);

uint64_t Crypto_Symmetric_Poly1305_add_2_24(uint64_t x);

void Crypto_Symmetric_Poly1305_toField_plus_2_128(uint64_t *b, uint8_t *s);

void Crypto_Symmetric_Poly1305_toField_plus(uint32_t len, uint64_t *a, uint8_t *b);

void
Crypto_Symmetric_Poly1305_upd_wordB_16(
  uint8_t *s,
  uint8_t s0,
  uint8_t s1,
  uint8_t s2,
  uint8_t s3,
  uint8_t s4,
  uint8_t s5,
  uint8_t s6,
  uint8_t s7,
  uint8_t s8,
  uint8_t s9,
  uint8_t s10,
  uint8_t s11,
  uint8_t s12,
  uint8_t s13,
  uint8_t s14,
  uint8_t s15
);

void Crypto_Symmetric_Poly1305_trunc1305(uint64_t *a, uint8_t *b);

void Crypto_Symmetric_Poly1305_fix(uint8_t *r, uint32_t i, uint8_t mask);

void Crypto_Symmetric_Poly1305_clamp(uint8_t *r);

void Crypto_Symmetric_Poly1305_poly1305_init(uint64_t *r, uint8_t *s, uint8_t *key);

void Crypto_Symmetric_Poly1305_poly1305_start(uint64_t *a);

typedef void *Crypto_Symmetric_Poly1305_log_t;

void *Crypto_Symmetric_Poly1305_ilog();

void Crypto_Symmetric_Poly1305_add_word(uint8_t *a, uint8_t *b);

void Crypto_Symmetric_Poly1305_poly1305_finish(uint8_t *tag, uint64_t *acc, uint8_t *s);
#endif
